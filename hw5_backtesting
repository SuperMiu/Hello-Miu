# 計算短期MA與長期MA相交之買進賣出策略，
# 與buy and hold策略之回報率比較

import yfinance as yf
import numpy as np
import pandas as pd 

#輸入想爬取的股票，短期MA及長期MA天數，以及想爬取的資料時間(預設為6個月)
def crawl_price(stock, sma, lma, slot='6mo'):
    # stockid
    # slot: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
    
    # crawl price data
    stockData = yf.Ticker(stock).history(period = slot)
    stockdf = pd.DataFrame(data = stockData)
    stockdf.reset_index(inplace=True)
    
    stockdf['Date'] = pd.to_datetime(stockdf['Date'],
                                     format = '%Y-%m-%d')
    stockdf.set_index(['Date'], inplace = True)
                    
    # 計算SMA及LMA
    SMA = 'MA{}'.format(sma)
    LMA = 'MA{}'.format(lma)
    
    stockdf[SMA] = stockdf.Close.rolling(window = sma).mean()
    stockdf[LMA] = stockdf.Close.rolling(window = lma).mean()
    
    stockdf.dropna() # clear the data without MA
    
    # 'Signal':當sma大於lma, Signal = 1，否則為0
    stockdf['Signal'] = np.where(stockdf[SMA] >= stockdf[LMA], 1, 0)
    
    # 'Point': 判斷Signal變化，當signal[n] 與 signal[n-1](前一交易日)不同:
    # 1(sma超過lma，買點), -1(sma跌破lma，賣點) , 0(沒變化)
    stockdf['Point'] = stockdf['Signal'].diff() 
             
    return stockdf

#輸入爬取後的股價dataframe，將計算MA策略及buy and hold策略之回報率
def MA_backtest(stockdf):
    result = {} # save backtesting result
    
# MA strategy
    Account = {
    'cash' : 10000.00,
    'share' : 0.0,
    'record':[],
    'value' : 0.0,
    'return': 0.0
    }
    
    for i in range(stockdf.shape[0]-1): # avoid out of index
        if stockdf.iloc[i, 10] == 1: # buy point
            
            price = stockdf.iloc[i+1, 0] # next day 'Open' price
            
            Account['share'] = Account['cash'] / price # buy in share
            Account['cash'] = 0
            
            # record the transaction: buy, date, price, share
            transaction = ('buy', stockdf.index[i+1], price, Account['share'])
            Account['record'].append(transaction)
            
        elif stockdf.iloc[i, 10] == -1: # sell point
                
            price = stockdf.iloc[i+1, 0] #next day 'Open' price
                    
            Account['cash'] = Account['share'] * price # sell all share
            Account['share'] = 0
            
            # record the transaction: sell, date, price, share
            transaction = ('sell', stockdf.index[i+1], price, Account['share'])
            Account['record'].append(transaction)
            
        else:
            pass

    # counting account's value and return rate
    Account['value'] = Account['cash'] + \
                       Account['share'] * stockdf.iloc[-1, 0]      
    Account['return'] = (Account['value']-10000)/10000*100
    
    result['MA'] = Account # save account result to result dic
    
# buy_hold strategy

    hold_Account = {
        'cash' : 10000.00,
        'share' : 0.0,
        'record':[],
        'value': 0.0,
        'return': 0.0
        }
    
    i = 0
    while stockdf.iloc[i, 10] != 1: # not buy point
        i += 1 
    
    else: # buying point
            
        price = stockdf.iloc[i+1, 0] #next day 'Open' price
        
        hold_Account['share'] = hold_Account['cash'] / price
        hold_Account['cash'] = 0
        
        # record the transaction: buy, date, price, share
        transaction = ('buy', stockdf.index[i+1], price, hold_Account['share'])
        hold_Account['record'].append(transaction)
        
    # counting account's value and return rate
    hold_Account['value'] = hold_Account['cash'] + \
                            hold_Account['share'] * stockdf.iloc[-1, 0]
    hold_Account['return'] = (hold_Account['value']-10000)/10000*100
    
    result['buy_hold'] = hold_Account # save account result to result dic
    
# print backtesting result
    print('Start: {}'.format(stockdf.index[0]))
    print('End: {}'.format(stockdf.index[-1]))
    print('Initial capital: 10,000')
    print('MA Final capital: {}'.format(Account['value']))
    print('MA Return(%): {}'.format(Account['return']))
    print('Buy hold Final capital: {}'.format(hold_Account['value']))
    print('Buy hold Return(%): {}'.format(hold_Account['return']))

    return result


#參數設定
STOCK = 'ARKK' #股票yahoo Ticker
SMA = 5 #短線天數
LMA = 20 #長線天數
SLOT = '6mo'  # 股價區間 slot: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max

STOCKDF = crawl_price(STOCK, SMA, LMA, SLOT)

BACKTEST_RESULT = MA_backtest(STOCKDF)
