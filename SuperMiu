
# 針對SP500指定之市值前幾大股票，在指定區間內有無出現買點(短線超過長線)或賣點(短線跌破長線)
# 使用方式:於參數設定修改各項參數值，如有出現買賣點會回傳至buying / selling point list並繪圖。
# 驗證程式結果: 參閱繪圖結果長線及短線交叉點是否正確

# 使用之函式庫: requests、pandas、yfinance、matplotlib，皆須先行下載

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import requests

#輸入想爬取的股票list，短期MA及長期MA天數，以及想爬取的資料時間(預設為6個月)
def crawl_price(stock, sma, lma, slot='6mo'):
    # stockid
    # slot: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
    
    # crawl price data
    stockdf = pd.DataFrame(data = yf.Ticker(stock).
                           history(period = slot))
    stockdf.reset_index(inplace=True)
    
    stockdf['Date'] = pd.to_datetime(stockdf['Date'],
                                     format = '%Y-%m-%d')
    stockdf.set_index(['Date'], inplace = True)
                    
    # 計算SMA及LMA
    SMA = 'MA{}'.format(sma)
    LMA = 'MA{}'.format(lma)
    
    stockdf[SMA] = stockdf.Close.rolling(window = sma).mean()
    stockdf[LMA] = stockdf.Close.rolling(window = lma).mean()
    
    stockdf.dropna() # clear the data without MA
    
    # 'Signal':當sma大於lma, Signal = 1，否則為0
    stockdf['Signal'] = np.where(stockdf[SMA] >= stockdf[LMA], 1, 0)
    
    # 'Point': 判斷Signal變化，當signal[n] 與 signal[n-1](前一交易日)不同:
    # 1(sma超過lma，買點), -1(sma跌破lma，賣點) , 0(沒變化)
    stockdf['Point'] = stockdf['Signal'].diff() 
             
    return stockdf


def graph(df, name, sma, lma):
    SMA = 'MA{}'.format(sma)
    LMA = 'MA{}'.format(lma)
    
    plt.figure()
       
    # plot close price, short-term and long-term moving averages 
    plt.plot(df['Close'], color = 'gray', label= 'Close Price') 
    plt.plot(df[SMA], color = 'red', label = SMA) 
    plt.plot(df[LMA], color = 'orange', label = LMA)
    # plot ‘buy’ signals and show the date
    plt.plot(df[df['Point'] == 1].index, 
             df[SMA][df['Point'] == 1], 
             '^', markersize = 15, color = 'green', label = 'buy')
    for i,j in zip(df[df['Point'] == 1].index, df[SMA][df['Point'] == 1]):
        plt.text(i, j, str(i).replace(' 00:00:00',''))
        
    # plot ‘sell’ signals and show the date
    plt.plot(df[df['Point'] == -1].index, 
             df[SMA][df['Point'] == -1], 
             'v', markersize = 15, color = 'red', label = 'sell')
    for i,j in zip(df[df['Point'] == -1].index, df[SMA][df['Point'] == -1]):
        plt.text(i, j, str(i).replace(' 00:00:00',''))       
    
    plt.ylabel('Price', fontsize = 15 )
    plt.xlabel('Date', fontsize = 15 )
    plt.title('{} Trend'.format(name), fontsize = 20)
    plt.legend()
    plt.grid()
    plt.show()

# 判斷設定天數內(day)的最新資料有無出現買點或賣點(預設為前一天收盤價)，
# 輸入股價資料的dictionary
def point(stock_dic, day = 1):
    buy_point = []
    sell_point = []
    for stock, stockdf in stock_dic.items():
        #找尋倒數幾筆(-delta列)，第10欄買點或賣點('Point')資料
        for point in stockdf.iloc[-day: , 10]: 
            if point == 1:
                buy_point.append(stock)
            elif point == -1:
                sell_point.append(stock)
            else:
                pass
    
    print('buying point:')
    print(buy_point)
    print('selling point:')
    print(sell_point)
    
    return buy_point, sell_point

# 要取得sp500市值前幾大之股票，如no = 3，代表前3大
def get_sp500symbols(no = 10):
    url = 'https://www.slickcharts.com/sp500'
    headers = {"User-Agent" : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'}
    request = requests.get(url, headers = headers)
    data = pd.read_html(request.text)[0]

    # 先將代碼中出現'.'取代為'-'，避免yf查不到；之後回傳需要前幾大的股票代碼
    data['Symbol'] = data['Symbol'].apply(lambda x: x.replace('.', '-'))
    symbol_lst = data['Symbol'].iloc[:no]
        
    return symbol_lst




#參數設定
sma = 5 #短線天數
lma = 20 #長線天數
slot = '3mo'  # 股價區間 slot: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
delta = 5 #查詢指定天數區間內有無出現買賣點
number = 10 #要取得sp500市值前幾大之股票


if __name__ == '__main__':
    get_sp500symbols()

# SP500前幾大股票
sp500_lst = get_sp500symbols(number) 

sp_dic = {}
for stock in sp500_lst:
    sp_dic[stock] = crawl_price(stock, sma, lma, slot) 
    
sp_point_result = point(sp_dic, delta) #判斷指定天數內有無買賣點

for p in sp_point_result: #有買賣點繪圖
    for stock in p:
        graph(sp_dic[stock],stock, sma, lma)
