import yfinance as yf
import pandas as pd
import requests
from io import StringIO
import time
from datetime import date, timedelta

#  抓取指定區間TWSE法人買賣超資料，每60秒爬取一筆
def crawl_forcap(start_date, end_date, forcap_df):
    def daterange(start_date, end_date):
        for n in range(int((end_date - start_date).days) +1):
            yield start_date + timedelta(n)    
    
    weekend = set([5, 6])
    
    for day in daterange(start_date, end_date):
        if day.weekday() not in weekend: # skip weekend
            print(day.strftime("%Y%m%d"))
            time.sleep(60) # avoid block by twse
            r = requests.get('http://www.tse.com.tw/fund/T86?response=csv&date=' \
                             + day.strftime("%Y%m%d") + '&selectType=ALLBUT0999')
            if len(r._content) > 10: # skip holiday on weekday
                df = pd.read_csv(StringIO(r.text), header=1).dropna(how='all', axis=1).dropna(how='any')
                df['date'] = day
                forcap_df = forcap_df.append(df)
            else:
                pass
        else:
            pass
       
    forcap_df.set_index('證券代號', inplace=True) #將代號設為index
    
    return forcap_df

# 獲取個股資料
def stock_forcap(stockid, forcap_df): 
    
    stockdf = forcap_df.loc[stockid] #選擇forcap_df中指定股票資料
    stockdf.set_index('date', inplace = True) #將日期設為index
    stockdf.sort_index(inplace = True) #日期排序
    
    # 從yf獲取個股價格及交易量資料，並併入。
    # 因yf會抓到給定日前一天，end_date要加1天
    start_date = stockdf.index[0]
    end_date = (pd.to_datetime(stockdf.index[-1]) + \
                timedelta(days=1)).strftime("%Y-%m-%d")
        
    pricedf = yf.Ticker(stockid + '.TW'). \
              history(start = start_date, end = end_date )
    stockdf = stockdf.join(pricedf)
        
    return stockdf

# 回測，放入指定的個股資料stockdf，
# threshold: 設定外資買賣超佔當日成交量多少比率以上為買進/賣出訊號
def forcap_tw_backtest(stockdf, threshold = 0.1, \
                       comm_rate = 0.001425, tax_rate = 0.003):
        
    # prepare stockdf
    stockdf.rename(columns = {'外陸資買賣超股數(不含外資自營商)' : '外資買賣超'}, inplace = True)
    stockdf['外資買賣超'] = stockdf['外資買賣超'].str.replace(',', '')
    stockdf['forcap_ratio'] = stockdf['外資買賣超'].astype(int) /   \
                                stockdf['Volume']
    
    # 買超且超過當日成交量指定% = 買進訊號 1
    stockdf.loc[stockdf['forcap_ratio'] >= threshold ,'Signal'] = 1 
    # hold 0
    stockdf.loc[ (stockdf['forcap_ratio'] > -threshold) &
                (stockdf['forcap_ratio'] < threshold) ,'Signal'] = 0
    # 賣超且超過當日成交量指定% = 賣出訊號 -1
    stockdf.loc[stockdf['forcap_ratio'] <= -threshold ,'Signal'] = -1
            
    result = {} # save backtesting result
# forcap strategy
    Account = {
    'cash' : 10000.00,
    'share' : 0.0,
    'record':[],
    'value' : 0.0,
    'return': 0.0
    }
    
    for i in range(stockdf.shape[0]-1): # avoid out of index
        price = stockdf.loc[stockdf.index[i+1], 'Open'] # next day 'Open' price
    
        # buy point, account has money, and next day 'Open' has value     
        if stockdf.loc[stockdf.index[i], 'Signal'] == 1 and \
            Account['cash']!=0 and pd.isna(price) == False : 
           
            Account['share'] = Account['cash'] / (price * (1 + comm_rate)) # 手續費調整後價格 # buy in share
            Account['cash'] = 0
            
            # record the transaction: buy, date, price, share
            transaction = ('buy', stockdf.index[i+1], price, Account['share'])
            Account['record'].append(transaction)
            
        elif stockdf.loc[stockdf.index[i], 'Signal'] == -1 and \
            Account['share']!=0 and pd.isna(price) == False: # sell point
            
            price = stockdf.loc[stockdf.index[i+1], 'Open'] #next day 'Open' price
            
            # sell all share 手續費及稅收調整後價格            
            Account['cash'] = Account['share'] * (price * (1 - comm_rate - tax_rate)) 
            Account['share'] = 0
            
            # record the transaction: sell, date, price, share
            transaction = ('sell', stockdf.index[i+1], price, Account['share'])
            Account['record'].append(transaction)
                      
        else:
            pass

    # counting account's value and return rate
    Account['value'] = Account['cash'] + \
                       Account['share'] * \
                       stockdf.loc[stockdf.index[-1], 'Open']      
    Account['return'] = (Account['value']-10000)/10000*100
    
    result['Forcap'] = Account # save account result to result dic
    
# buy_hold strategy

    hold_Account = {
        'cash' : 10000.00,
        'share' : 0.0,
        'record':[],
        'value': 0.0,
        'return': 0.0
        }
                   
    price = stockdf.loc[stockdf.index[0], 'Open'] 
            
    hold_Account['share'] = hold_Account['cash'] /(price * (1 + comm_rate)) #手續費
    hold_Account['cash'] = 0
    
    # record the transaction: buy, date, price, share
    transaction = ('buy', stockdf.index[0], price, hold_Account['share'])
    hold_Account['record'].append(transaction)
        
    # counting account's value and return rate
    hold_Account['value'] = hold_Account['cash'] + \
                            hold_Account['share'] * \
                            stockdf.loc[stockdf.index[-1], 'Open']
    hold_Account['return'] = (hold_Account['value']-10000)/10000*100
    
    result['buy_hold'] = hold_Account # save account result to result dic
    
# print backtesting result
    print('Start: {}'.format(stockdf.index[0]))
    print('End: {}'.format(stockdf.index[-1]))
    print('Initial capital: 10,000')
    print('Follow Foreign Capital Final capital: {}'.format(Account['value']))
    print('Follow Foreign Capital Return(%): {}'.format(Account['return']))
    print('Buy hold Final capital: {}'.format(hold_Account['value']))
    print('Buy hold Return(%): {}'.format(hold_Account['return']))

    return result

# step1 : 抓twse三大法人買賣超資料，設定起訖日
START_DATE = date(2020, 1, 1)
END_DATE = date(2020, 1, 15)

if __name__ == '__main__':
    FORCAP_DF = pd.DataFrame() # FORCAP_DF = pd.read_csv(f'./data/FORCAP_20210101-20210930.csv')
    FORCAP_DF = crawl_forcap(START_DATE, END_DATE, FORCAP_DF)
    
# 如果要寫檔可執行以下幾行
# filename = 'FORCAP_DF_{}-{}'.format(FORCAP_DF['date'][0].strftime("%Y%m%d"),\
#                                     FORCAP_DF['date'][-1].strftime("%Y%m%d"))
# FORCAP_DF.to_csv(f"./data/"+ filename  +".csv")


# step2 : 設定想回測的個股代碼，以及外資買賣超超過當日交易量多少比例設為買賣訊號
STOCKID = '2330'
THRESHOLD = 0.2 # 0-1的數字

if __name__ == '__main__':
    STOCKDF = stock_forcap(STOCKID, FORCAP_DF)
    RESULT = forcap_tw_backtest(STOCKDF, THRESHOLD)
